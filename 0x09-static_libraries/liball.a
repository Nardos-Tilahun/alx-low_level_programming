!<arch>
0-isupper.c/    0           0     0     644     269       `
#include "main.h"

/**
 * _isupper- checks for uppercase character.
 * @c: - accept integer as parameter that will be checked
 * Return: 1 if c is uppercase, 0 otherwise
 */
int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

0-memset.c/     0           0     0     644     332       `
#include "main.h"

/**
 * _memset - concatinate two string
 * @s: first character pointer parameter
 * @b: second character parameter
 * @n: third unsigned integer parameter
 * Return: pointer character
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     382       `
#include "main.h"

/**
 * _strcat - concatinate two string
 * @dest: first character pointer parameter
 * @src: second character pointer parameter
 * Return: pointer character
 */
char *_strcat(char *dest, char *src)
{
	int i, n, m;

	for (n = 0; dest[n] != '\0'; n++)
	;
	for (m = 0; src[m] != '\0'; m++)
	;
	for (i = 0; i < m; i++)
	{
		dest[n + i] = src[i];
	}
	return (dest);
}
100-atoi.c/     0           0     0     644     452       `
#include "main.h"

/**
 * _atoi -  prints a string, in reverse followed by a new line, to stdout.
 * @s: character pointer that accept string
 * Return: integer
 */
int _atoi(char *s)
{
	int i = 0, j = 1;
	unsigned int n = 0;

	while (*(s + i) != '\0')
	{
		if (*(s + i) == '-')
		{
			j *= -1;
		}
		else if (*(s + i) >= 48 && *(s + i) <= 57)
		{
			n = n * 10 + (*(s + i) - '0');
		}
		else if (n != 0)
		{
			break;
		}
		i++;
	}
	return (n * j);
}
1-isdigit.c/    0           0     0     644     272       `
#include "main.h"

/**
 * _isdigit - checks for a digit (0 through 9).
 * @c: - accept integer as parameter that will be checked
 * Return: 1 if c is uppercase, 0 otherwise
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
1-memcpy.c/     0           0     0     644     344       `
#include "main.h"

/**
 * _memcpy - concatinate two string
 * @s: first character pointer parameter
 * @b: second character pointer parameter
 * @n: third unsigned integer parameter
 * Return: pointer character
 */
char *_memcpy(char *s, char *b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b[i];
	}
	return (s);
}
1-strncat.c/    0           0     0     644     451       `
#include "main.h"

/**
 * _strncat - concatinate two string
 * @dest: first character pointer parameter
 * @src: second character pointer parameter
 * @n: third integer parameter
 * Return: pointer character
 */
char *_strncat(char *dest, char *src, int n)
{
	int i, j, m;

	for (j = 0; dest[j] != '\0'; j++)
		;
	for (m = 0; src[m] != '\0'; m++)
		;
	if (m < n)
	{
		n = m;
	}
	for (i = 0; i < n; i++)
	{
		dest[j + i] = src[i];
	}
	return (dest);
}

2-strchr.c/     0           0     0     644     318       `
#include "main.h"

/**
 * _strchr - concatinate two string
 * @s: first character pointer parameter
 * @c: second character parameter
 * Return: pointer character
 */
char *_strchr(char *s, char c)
{
	unsigned int i;

	for (i = 0; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
		{
			return (s + i);
		}
	}
	return ('\0');
}
2-strlen.c/     0           0     0     644     241       `
#include "main.h"

/**
 * _strlen - prints a triangle, followed by a new line.
 * @s: triangle base and height
 * Return: the length of the string
 */
int _strlen(char *s)
{
	int i = 0;

	while (*(s + i) != '\0')
	{
		i++;
	}
	return (i);
}

2-strncpy.c/    0           0     0     644     567       `
#include "main.h"

/**
 * _strncpy - concatinate two string
 * @dest: first character pointer parameter
 * @src: second character pointer parameter
 * @n: third integer parameter
 * Return: pointer character
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i, j, m;

	for (j = 0; dest[j] != '\0'; j++)
		;
	for (m = 0; src[m] != '\0'; m++)
		;
	if (m >= n)
	{
		for (i = 0; i < n; i++)
			dest[i] = src[i];
	}
	else if (m < n)
	{
		for (i = 0; i < j; i++)
		{
			if (i < m)
				dest[i] = src[i];
			else if (i < n)
				dest[i] = '\0';
		}
	}
	return (dest);
}

3-islower.c/    0           0     0     644     290       `
#include "main.h"

/**
 * _islower - checks for lowercase character.
 * @c: an integer variable that will accept the character to be checked
 *
 * Return: 1 if c is a lowercase, 0 otherwise
 */
int _islower(int c)
{
	if (c >= 97 && c <= 'z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
3-puts.c/       0           0     0     644     253       `
#include "main.h"

/**
 * _puts -  prints a string, followed by a new line, to stdout.
 * @str: character pointer that accept string
 */
void _puts(char *str)
{
	int i = 0;

	while (*(str + i) != '\0')
	{
		_putchar(*(str + i++));
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     401       `
#include "main.h"

/**
 * _strcmp - concatinate two string
 * @s1: first character pointer parameter
 * @s2: second character pointer parameter
 * Return: the difference
 */
int _strcmp(char *s1, char *s2)
{
	int i, n = 0;

	for (i = 0; s1[i] != '\0'; i++)
	{
		if (s1[i] == s2[i])
			continue;
		n = s1[i] - s2[i];
		break;
	}
	if (s1[i] == '\0' && s2[i] != '\0')
		n = s1[i] - s2[i];
	return (n);
}

3-strspn.c/     0           0     0     644     455       `
#include "main.h"

/**
 * _strspn - concatinate two string
 * @s: first character pointer parameter
 * @b: second character pointer parameter
 * Return: unsigned integer
 */
unsigned int _strspn(char *s, char *b)
{
	unsigned int i, j, c = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; b[j] != '\0'; j++)
		{
			if (s[i] == b[j])
			{
				c++;
				break;
			}
			if (s[i] != b[j] && b[j + 1] == '\0')
			{
				return (c);
			}
		}
	}
	return (c);
}

4-isalpha.c/    0           0     0     644     318       `
#include "main.h"

/**
 * _isalpha - checks for alphabetic character.
 * @c: an intiger that will be check wheather it is
 * Return: 1 if c is a letter, lowercase or uppercase, 0 otherwise
 */
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
4-strpbrk.c/    0           0     0     644     380       `
#include "main.h"

/**
 * _strpbrk - concatinate two string
 * @s: first character pointer parameter
 * @b: second character pointer parameter
 * Return: pointer character
 */
char *_strpbrk(char *s, char *b)
{
	unsigned int i, j;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; b[j] != '\0'; j++)
		{
			if (s[i] == b[j])
			{
				return (s + i);
			}
		}
	}
	return ('\0');
}
5-strstr.c/     0           0     0     644     496       `
#include "main.h"

/**
 * _strstr - concatinate two string
 * @s: first character pointer parameter
 * @b: second character pointer parameter
 * Return: pointer character
 */
char *_strstr(char *s, char *b)
{
	unsigned int i, j;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] == b[0])
		{
			for (j = 0; b[j] != '\0'; j++)
			{
				if (s[i + j] == b[j])
				{
					if (b[j + 1] == '\0')
					{
						return (s + i);
					}
					else
						continue;
				}
				break;
			}
		}
	}
	return ('\0');
}
6-abs.c/        0           0     0     644     258       `
#include "main.h"

/**
 * _abs - computes the absolute value of an integer.
 * @n: an intiger that will be check for the absolute
 * Return: absolute value of an integer
 */
int _abs(int n)
{
	if (n >= 0)
	{
		return (n);
	}
	else
	{
		return (-1 * n);
	}
}
9-strcpy.c/     0           0     0     644     302       `
#include "main.h"

/**
 * _strcpy - check the code
 * @dest: character
 * @src: character
 * Return: dest pointer character
 */
char *_strcpy(char *dest, char *src)
{
	int k, i = 0;

	while (*(src + i) != '\0')
	{
		i++;
	}
	for (k = 0; k <= i; k++)
	{
		*(dest + k) = *(src + k);
	}
	return (dest);
}
main.c/         0           0     0     644     215       `
#include "main.h"

/*
 * main - entry program
 * Retrun - Always zero(succesfull)
 */
int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}

_putchar.c/     0           0     0     644     239       `
#include "main.h"
#include <stdio.h>

/**
 * _putchar - Writes a character to stdout
 * @c: The character to be written
 *
 * Return: The character written
 */
char _putchar(char c) /* _putchar used to return c*/
{
	return (putchar(c));
}

